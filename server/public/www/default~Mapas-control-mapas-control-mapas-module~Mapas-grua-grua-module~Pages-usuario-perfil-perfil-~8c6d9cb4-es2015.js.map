{"version":3,"sources":["./src/app/providers/Api/Biografia.service.ts","./src/app/providers/Api/UsuariosLogin.service.ts"],"names":[],"mappings":"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","file":"default~Mapas-control-mapas-control-mapas-module~Mapas-grua-grua-module~Pages-usuario-perfil-perfil-~8c6d9cb4-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { URL_SERVER } from '../../../environments/environment';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { map, concatAll, retryWhen, delayWhen, take } from 'rxjs/operators';\r\nimport { timer, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class BiografiaService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    private hanflerError(error: Observable<any>) {\r\n\r\n            let intento = 0;\r\n\r\n            return error.pipe(\r\n                delayWhen(() => timer(3000)),\r\n                map((errorHttp: HttpErrorResponse) => {\r\n\r\n                    intento++;\r\n                    if (intento === 3) {\r\n                        console.log('Entramos a intentos');\r\n                        if (errorHttp instanceof ErrorEvent) {\r\n                            throw new Error('Error de Red');\r\n                        } else {\r\n\r\n                            if ( errorHttp.status === 404) {\r\n                               // throw new Error(' Credenciales incorrectas, por favor comprueba la información ');\r\n                            } else {\r\n                               // throw new Error(' No se pudo realizar la conexión, comprueba tu red ');\r\n                            }\r\n                           \r\n                        }\r\n                    }\r\n                }),\r\n                take(3)\r\n            );\r\n    }\r\n\r\n    getBiografia(token: any, id?) {\r\n        const httpHeader = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token,\r\n                'x-id': id\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/biografia`, httpHeader).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n\r\n\r\n    postBiografia(token: any, data: any) {\r\n        const httpHeader = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.post(`${URL_SERVER}/biografia`, data, httpHeader).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, timer, of, from } from 'rxjs';\r\nimport { retryWhen, delayWhen, tap, catchError, take, map, concatAll } from 'rxjs/operators';\r\nimport { Registro } from '../../interfaces/registro.interface';\r\nimport { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';\r\nimport { URL_SERVER } from 'src/environments/environment';\r\nimport { InicioService } from '../Almacenamiento/inicio.service';\r\nimport { NavController } from '@ionic/angular';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UsuariosLoginService {\r\n\r\n\r\n    constructor(\r\n                private http: HttpClient,\r\n                private transfer: FileTransfer, \r\n                private almacenamiento: InicioService,\r\n                private navCtrl: NavController) { }\r\n\r\n    private hanflerError(error: Observable<any>) {\r\n\r\n        let intento = 0;\r\n\r\n        return error.pipe(\r\n            delayWhen(() => timer(5000)),\r\n            map((errorHttp: HttpErrorResponse) => {\r\n\r\n                intento++;\r\n                \r\n                console.log('Entramos a intentos');\r\n                if (errorHttp instanceof ErrorEvent) {\r\n                    if (intento === 3) {\r\n                        throw new Error('Error de Red');\r\n                    }\r\n                } else if (errorHttp instanceof ProgressEvent) {\r\n                    if (intento === 3) {\r\n                        throw new Error('Error de Red');\r\n                    }\r\n                } else {\r\n\r\n                    if ( errorHttp.status === 404) {\r\n                           throw new Error(' al realizar la solicictud ');\r\n                        } else if ( errorHttp.status === 401) {\r\n                            this.almacenamiento.terminarPartida().then(() => {\r\n                                this.navCtrl.navigateRoot('/home');\r\n                            });\r\n                            throw new Error('No tiene permisos para realizar la petición ');\r\n                         } else {\r\n                             console.log(errorHttp, 'Error de servidor');\r\n                             throw new Error(' No se pudo realizar la petición, intentalo más tarde ');\r\n                        }\r\n                }\r\n            }),\r\n            take(3)\r\n        );\r\n}\r\n\r\n    registrar(data): Observable<any> {\r\n        return this.http.post(`${URL_SERVER}/usuarios`, data).pipe(\r\n            map((res: any) => {\r\n                if (res.exe) {\r\n                    res.response.exe = res.exe;\r\n                    res.response.token = res.token;\r\n                    return res.response;\r\n                } else {\r\n                    return res;\r\n                }\r\n            }),\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n\r\n    usuario(usuario): Observable<any> {\r\n        return this.http.post(`${URL_SERVER}/usuarios/unico`, {buscar: usuario}).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n    iniciarPartida(usuario, dispositivoID): Observable<any> {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                'x-dispositivoID': dispositivoID\r\n            })\r\n        };\r\n        return this.http.post(`${URL_SERVER}/login`, usuario, options ).pipe(\r\n            map((res: any) => {\r\n                if (res.exe) {\r\n                    res.response.exe = res.exe;\r\n                    res.response.token = res.token;\r\n                    return res.response;\r\n                } else {\r\n                    return res.exe;\r\n                }\r\n            }),\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    fotoPerfilUsuarioMoto( imagen, token, tipo ) {\r\n        const options: FileUploadOptions  = {\r\n            fileKey: 'archivo',\r\n            httpMethod: 'PUT',\r\n            headers: {\r\n                'x-token': token\r\n            },\r\n            params: {\r\n                tipo\r\n            }\r\n        }\r\n\r\n        // 4912685137238652\r\n\r\n        const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n        return from(fileTransfer.upload(imagen, `${URL_SERVER}/upload`, options))\r\n        .pipe(\r\n            catchError(error => {\r\n                console.log(`No se pudo subir la imagen `);\r\n                throw new Error(`No se pudo subir la imagen `);\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    fotoPortada( imagen, token, old ) {\r\n        const options: FileUploadOptions  = {\r\n            fileKey: 'archivo',\r\n            httpMethod: 'PUT',\r\n            headers: {\r\n                'x-token': token\r\n            },\r\n            params: {\r\n                old\r\n            }\r\n        }\r\n\r\n        // 4912685137238652\r\n\r\n        const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n        return from(fileTransfer.upload(imagen, `${URL_SERVER}/upload/portada/`, options))\r\n        .pipe(\r\n            catchError(error => {\r\n                console.log(`No se pudo subir la imagen `);\r\n                throw new Error(`No se pudo subir la imagen `);\r\n            })\r\n        );\r\n    }\r\n\r\n    viewImagen(token) {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n        return this.http.get(`${URL_SERVER}/ver`, options).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    buscarUsuario(termino: string, token: string) {\r\n        const headerOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/usuarios/${termino}`, headerOption ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    buscarPerfilUsuario(usuario, token) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/usuarios/perfil/${usuario}`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    traerMisNotificaciones(token, desde) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token,\r\n                'x-desde': desde.toString()\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/notificaciones/misnotificaciones/`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    notiCantidad(token) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/notificaciones/numero/`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    ActualizarNotificaciones(token, id) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.put(`${URL_SERVER}/notificaciones/misnotificaciones/cambiarestado/`, {id}, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    listarPaises() {\r\n        return this.http.get(`${URL_SERVER}/paises` ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    listarCiudades(pais) {\r\n        const headerOption = {\r\n            headers: new HttpHeaders({\r\n                'x-pais': pais\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/ciudad`, headerOption ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    CodigoComprobar(data) {\r\n     \r\n        return this.http.put(`${URL_SERVER}/codigos`, data ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    EditarCodigo(data) {\r\n     \r\n        return this.http.put(`${URL_SERVER}/codigos/cambiar`, data ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n\r\n    negocios() {\r\n     \r\n        return this.http.get(`${URL_SERVER}/tiponegocio` ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}
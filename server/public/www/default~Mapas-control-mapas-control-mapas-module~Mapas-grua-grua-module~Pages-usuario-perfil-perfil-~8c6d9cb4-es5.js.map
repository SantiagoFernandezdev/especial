{"version":3,"sources":["webpack:///src/app/providers/Api/Biografia.service.ts","webpack:///src/app/providers/Api/UsuariosLogin.service.ts"],"names":["BiografiaService","http","error","intento","pipe","errorHttp","console","log","ErrorEvent","Error","status","token","id","httpHeader","headers","get","hanflerError","data","post","providedIn","UsuariosLoginService","transfer","almacenamiento","navCtrl","ProgressEvent","terminarPartida","then","navigateRoot","res","exe","response","usuario","buscar","dispositivoID","options","imagen","tipo","fileKey","httpMethod","params","fileTransfer","create","upload","old","termino","headerOption","HeaderOption","desde","toString","put","pais"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaA,gB;;;AAET,gCAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;qCAEpBC,K,EAAwB;AAErC,cAAIC,OAAO,GAAG,CAAd;AAEA,iBAAOD,KAAK,CAACE,IAAN,CACH,iEAAU;AAAA,mBAAM,mDAAM,IAAN,CAAN;AAAA,WAAV,CADG,EAEH,2DAAI,UAACC,SAAD,EAAkC;AAElCF,mBAAO;;AACP,gBAAIA,OAAO,KAAK,CAAhB,EAAmB;AACfG,qBAAO,CAACC,GAAR,CAAY,qBAAZ;;AACA,kBAAIF,SAAS,YAAYG,UAAzB,EAAqC;AACjC,sBAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH,eAFD,MAEO;AAEH,oBAAKJ,SAAS,CAACK,MAAV,KAAqB,GAA1B,EAA+B,CAC5B;AACF,iBAFD,MAEO,CACJ;AACF;AAEJ;AACJ;AACJ,WAjBD,CAFG,EAoBH,4DAAK,CAAL,CApBG,CAAP;AAsBP;;;qCAEYC,K,EAAYC,E,EAAK;AAAA;;AAC1B,cAAMC,UAAU,GAAG;AACfC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH,KADU;AAErB,sBAAQC;AAFa,aAAhB;AADM,WAAnB;AAOA,iBAAO,KAAKX,IAAL,CAAUc,GAAV,WAAiB,oEAAjB,iBAAyCF,UAAzC,EAAqDT,IAArD,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,KAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;sCAIaS,K,EAAYM,I,EAAW;AAAA;;AACjC,cAAMJ,UAAU,GAAG;AACfC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADM,WAAnB;AAMA,iBAAO,KAAKV,IAAL,CAAUiB,IAAV,WAAkB,oEAAlB,iBAA0CD,IAA1C,EAAgDJ,UAAhD,EAA4DT,IAA5D,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;;;;;uBAzDQF,gB,EAAgB,uH;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAHb;;;;;sEAGHA,gB,EAAgB;cAJ5B,wDAI4B;eAJjB;AACRmB,oBAAU,EAAE;AADJ,S;AAIiB,Q;;;;;;;;;;;;;;;;;;;;;;ACV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAcaC,oB;;;AAGT,oCACoBnB,IADpB,EAEoBoB,QAFpB,EAGoBC,cAHpB,EAIoBC,OAJpB,EAI4C;AAAA;;AAHxB,aAAAtB,IAAA,GAAAA,IAAA;AACA,aAAAoB,QAAA,GAAAA,QAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AAA2B;;;;qCAE1BrB,K,EAAwB;AAAA;;AAEzC,cAAIC,OAAO,GAAG,CAAd;AAEA,iBAAOD,KAAK,CAACE,IAAN,CACH,iEAAU;AAAA,mBAAM,mDAAM,IAAN,CAAN;AAAA,WAAV,CADG,EAEH,2DAAI,UAACC,SAAD,EAAkC;AAElCF,mBAAO;AAEPG,mBAAO,CAACC,GAAR,CAAY,qBAAZ;;AACA,gBAAIF,SAAS,YAAYG,UAAzB,EAAqC;AACjC,kBAAIL,OAAO,KAAK,CAAhB,EAAmB;AACf,sBAAM,IAAIM,KAAJ,CAAU,cAAV,CAAN;AACH;AACJ,aAJD,MAIO,IAAIJ,SAAS,YAAYmB,aAAzB,EAAwC;AAC3C,kBAAIrB,OAAO,KAAK,CAAhB,EAAmB;AACf,sBAAM,IAAIM,KAAJ,CAAU,cAAV,CAAN;AACH;AACJ,aAJM,MAIA;AAEH,kBAAKJ,SAAS,CAACK,MAAV,KAAqB,GAA1B,EAA+B;AACxB,sBAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACF,eAFL,MAEW,IAAKJ,SAAS,CAACK,MAAV,KAAqB,GAA1B,EAA+B;AAClC,sBAAI,CAACY,cAAL,CAAoBG,eAApB,GAAsCC,IAAtC,CAA2C,YAAM;AAC7C,wBAAI,CAACH,OAAL,CAAaI,YAAb,CAA0B,OAA1B;AACH,iBAFD;;AAGA,sBAAM,IAAIlB,KAAJ,CAAU,8CAAV,CAAN;AACF,eALK,MAKC;AACHH,uBAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuB,mBAAvB;AACA,sBAAM,IAAII,KAAJ,CAAU,wDAAV,CAAN;AACJ;AACR;AACJ,WA3BD,CAFG,EA8BH,4DAAK,CAAL,CA9BG,CAAP;AAgCP;;;kCAEaQ,I,EAAI;AAAA;;AACV,iBAAO,KAAKhB,IAAL,CAAUiB,IAAV,WAAkB,uEAAlB,gBAAyCD,IAAzC,EAA+Cb,IAA/C,CACH,2DAAI,UAACwB,GAAD,EAAc;AACd,gBAAIA,GAAG,CAACC,GAAR,EAAa;AACTD,iBAAG,CAACE,QAAJ,CAAaD,GAAb,GAAmBD,GAAG,CAACC,GAAvB;AACAD,iBAAG,CAACE,QAAJ,CAAanB,KAAb,GAAqBiB,GAAG,CAACjB,KAAzB;AACA,qBAAOiB,GAAG,CAACE,QAAX;AACH,aAJD,MAIO;AACH,qBAAOF,GAAP;AACH;AACJ,WARD,CADG,EAUH,iEAAU,UAAA1B,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CAVG,CAAP;AAYH;;;gCAGO6B,Q,EAAO;AAAA;;AACX,iBAAO,KAAK9B,IAAL,CAAUiB,IAAV,WAAkB,uEAAlB,sBAA+C;AAACc,kBAAM,EAAED;AAAT,WAA/C,EAAkE3B,IAAlE,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;uCAEc6B,O,EAASE,a,EAAa;AAAA;;AACjC,cAAMC,OAAO,GAAG;AACZpB,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,iCAAmBmB;AADE,aAAhB;AADG,WAAhB;AAKA,iBAAO,KAAKhC,IAAL,CAAUiB,IAAV,WAAkB,uEAAlB,aAAsCa,OAAtC,EAA+CG,OAA/C,EAAyD9B,IAAzD,CACH,2DAAI,UAACwB,GAAD,EAAc;AACd,gBAAIA,GAAG,CAACC,GAAR,EAAa;AACTD,iBAAG,CAACE,QAAJ,CAAaD,GAAb,GAAmBD,GAAG,CAACC,GAAvB;AACAD,iBAAG,CAACE,QAAJ,CAAanB,KAAb,GAAqBiB,GAAG,CAACjB,KAAzB;AACA,qBAAOiB,GAAG,CAACE,QAAX;AACH,aAJD,MAIO;AACH,qBAAOF,GAAG,CAACC,GAAX;AACH;AACJ,WARD,CADG,EAUH,iEAAU,UAAA3B,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CAVG,CAAP;AAYH;;;8CAEsBiC,M,EAAQxB,K,EAAOyB,I,EAAI;AACtC,cAAMF,OAAO,GAAuB;AAChCG,mBAAO,EAAE,SADuB;AAEhCC,sBAAU,EAAE,KAFoB;AAGhCxB,mBAAO,EAAE;AACL,yBAAWH;AADN,aAHuB;AAMhC4B,kBAAM,EAAE;AACJH,kBAAI,EAAJA;AADI;AANwB,WAApC,CADsC,CAYtC;;AAEA,cAAMI,YAAY,GAAuB,KAAKnB,QAAL,CAAcoB,MAAd,EAAzC;AAEA,iBAAO,kDAAKD,YAAY,CAACE,MAAb,CAAoBP,MAApB,YAA+B,uEAA/B,cAAoDD,OAApD,CAAL,EACN9B,IADM,CAEH,kEAAW,UAAAF,KAAK,EAAI;AAChBI,mBAAO,CAACC,GAAR;AACA,kBAAM,IAAIE,KAAJ,+BAAN;AACH,WAHD,CAFG,CAAP;AAOH;;;oCAGY0B,M,EAAQxB,K,EAAOgC,G,EAAG;AAC3B,cAAMT,OAAO,GAAuB;AAChCG,mBAAO,EAAE,SADuB;AAEhCC,sBAAU,EAAE,KAFoB;AAGhCxB,mBAAO,EAAE;AACL,yBAAWH;AADN,aAHuB;AAMhC4B,kBAAM,EAAE;AACJI,iBAAG,EAAHA;AADI;AANwB,WAApC,CAD2B,CAY3B;;AAEA,cAAMH,YAAY,GAAuB,KAAKnB,QAAL,CAAcoB,MAAd,EAAzC;AAEA,iBAAO,kDAAKD,YAAY,CAACE,MAAb,CAAoBP,MAApB,YAA+B,uEAA/B,uBAA6DD,OAA7D,CAAL,EACN9B,IADM,CAEH,kEAAW,UAAAF,KAAK,EAAI;AAChBI,mBAAO,CAACC,GAAR;AACA,kBAAM,IAAIE,KAAJ,+BAAN;AACH,WAHD,CAFG,CAAP;AAOH;;;mCAEUE,K,EAAO;AAAA;;AACd,cAAMuB,OAAO,GAAG;AACZpB,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADG,WAAhB;AAKA,iBAAO,KAAKV,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,WAAmCmB,OAAnC,EAA4C9B,IAA5C,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;sCAEa0C,O,EAAiBjC,K,EAAe;AAAA;;AAC1C,cAAMkC,YAAY,GAAG;AACjB/B,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADQ,WAArB;AAMA,iBAAO,KAAKV,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,uBAAwC6B,OAAxC,GAAmDC,YAAnD,EAAkEzC,IAAlE,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;4CAEmB6B,O,EAASpB,K,EAAO;AAAA;;AAChC,cAAMmC,YAAY,GAAG;AACjBhC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADQ,WAArB;AAMA,iBAAO,KAAKV,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,8BAA+CgB,OAA/C,GAA0De,YAA1D,EAAwE1C,IAAxE,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,MAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;+CAGsBS,K,EAAOoC,K,EAAO;AAAA;;AACjC,cAAMD,YAAY,GAAG;AACjBhC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH,KADU;AAErB,yBAAWoC,KAAK,CAACC,QAAN;AAFU,aAAhB;AADQ,WAArB;AAOA,iBAAO,KAAK/C,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,yCAAiE+B,YAAjE,EAA+E1C,IAA/E,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;qCAEYS,K,EAAO;AAAA;;AAChB,cAAMmC,YAAY,GAAG;AACjBhC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADQ,WAArB;AAMA,iBAAO,KAAKV,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,8BAAsD+B,YAAtD,EAAoE1C,IAApE,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;iDAGwBS,K,EAAOC,E,EAAI;AAAA;;AAChC,cAAMkC,YAAY,GAAG;AACjBhC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,yBAAWH;AADU,aAAhB;AADQ,WAArB;AAMA,iBAAO,KAAKV,IAAL,CAAUgD,GAAV,WAAiB,uEAAjB,uDAA+E;AAACrC,cAAE,EAAFA;AAAD,WAA/E,EAAqFkC,YAArF,EAAmG1C,IAAnG,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;uCAGc;AAAA;;AACX,iBAAO,KAAKD,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,cAAuCX,IAAvC,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;uCAEcgD,I,EAAM;AAAA;;AACjB,cAAML,YAAY,GAAG;AACjB/B,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACrB,wBAAUoC;AADW,aAAhB;AADQ,WAArB;AAMA,iBAAO,KAAKjD,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,cAAsC8B,YAAtC,EAAqDzC,IAArD,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;wCAEee,I,EAAM;AAAA;;AAElB,iBAAO,KAAKhB,IAAL,CAAUgD,GAAV,WAAiB,uEAAjB,eAAuChC,IAAvC,EAA8Cb,IAA9C,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;qCAEYe,I,EAAM;AAAA;;AAEf,iBAAO,KAAKhB,IAAL,CAAUgD,GAAV,WAAiB,uEAAjB,uBAA+ChC,IAA/C,EAAsDb,IAAtD,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;mCAIU;AAAA;;AAEP,iBAAO,KAAKD,IAAL,CAAUc,GAAV,WAAiB,uEAAjB,mBAA4CX,IAA5C,CACH,iEAAU,UAAAF,KAAK;AAAA,mBAAI,OAAI,CAACc,YAAL,CAAkBd,KAAlB,CAAJ;AAAA,WAAf,CADG,CAAP;AAGH;;;;;;;uBA9PQkB,oB,EAAoB,uH,EAAA,oI,EAAA,oI,EAAA,oH;AAAA,K;;;aAApBA,oB;AAAoB,eAApBA,oBAAoB,K;AAAA,kBAHjB;;;;;sEAGHA,oB,EAAoB;cAJhC,wDAIgC;eAJrB;AACRD,oBAAU,EAAE;AADJ,S;AAIqB,Q","file":"default~Mapas-control-mapas-control-mapas-module~Mapas-grua-grua-module~Pages-usuario-perfil-perfil-~8c6d9cb4-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { URL_SERVER } from '../../../environments/environment';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { map, concatAll, retryWhen, delayWhen, take } from 'rxjs/operators';\r\nimport { timer, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class BiografiaService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    private hanflerError(error: Observable<any>) {\r\n\r\n            let intento = 0;\r\n\r\n            return error.pipe(\r\n                delayWhen(() => timer(3000)),\r\n                map((errorHttp: HttpErrorResponse) => {\r\n\r\n                    intento++;\r\n                    if (intento === 3) {\r\n                        console.log('Entramos a intentos');\r\n                        if (errorHttp instanceof ErrorEvent) {\r\n                            throw new Error('Error de Red');\r\n                        } else {\r\n\r\n                            if ( errorHttp.status === 404) {\r\n                               // throw new Error(' Credenciales incorrectas, por favor comprueba la información ');\r\n                            } else {\r\n                               // throw new Error(' No se pudo realizar la conexión, comprueba tu red ');\r\n                            }\r\n                           \r\n                        }\r\n                    }\r\n                }),\r\n                take(3)\r\n            );\r\n    }\r\n\r\n    getBiografia(token: any, id?) {\r\n        const httpHeader = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token,\r\n                'x-id': id\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/biografia`, httpHeader).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n\r\n\r\n    postBiografia(token: any, data: any) {\r\n        const httpHeader = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.post(`${URL_SERVER}/biografia`, data, httpHeader).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, timer, of, from } from 'rxjs';\r\nimport { retryWhen, delayWhen, tap, catchError, take, map, concatAll } from 'rxjs/operators';\r\nimport { Registro } from '../../interfaces/registro.interface';\r\nimport { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';\r\nimport { URL_SERVER } from 'src/environments/environment';\r\nimport { InicioService } from '../Almacenamiento/inicio.service';\r\nimport { NavController } from '@ionic/angular';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class UsuariosLoginService {\r\n\r\n\r\n    constructor(\r\n                private http: HttpClient,\r\n                private transfer: FileTransfer, \r\n                private almacenamiento: InicioService,\r\n                private navCtrl: NavController) { }\r\n\r\n    private hanflerError(error: Observable<any>) {\r\n\r\n        let intento = 0;\r\n\r\n        return error.pipe(\r\n            delayWhen(() => timer(5000)),\r\n            map((errorHttp: HttpErrorResponse) => {\r\n\r\n                intento++;\r\n                \r\n                console.log('Entramos a intentos');\r\n                if (errorHttp instanceof ErrorEvent) {\r\n                    if (intento === 3) {\r\n                        throw new Error('Error de Red');\r\n                    }\r\n                } else if (errorHttp instanceof ProgressEvent) {\r\n                    if (intento === 3) {\r\n                        throw new Error('Error de Red');\r\n                    }\r\n                } else {\r\n\r\n                    if ( errorHttp.status === 404) {\r\n                           throw new Error(' al realizar la solicictud ');\r\n                        } else if ( errorHttp.status === 401) {\r\n                            this.almacenamiento.terminarPartida().then(() => {\r\n                                this.navCtrl.navigateRoot('/home');\r\n                            });\r\n                            throw new Error('No tiene permisos para realizar la petición ');\r\n                         } else {\r\n                             console.log(errorHttp, 'Error de servidor');\r\n                             throw new Error(' No se pudo realizar la petición, intentalo más tarde ');\r\n                        }\r\n                }\r\n            }),\r\n            take(3)\r\n        );\r\n}\r\n\r\n    registrar(data): Observable<any> {\r\n        return this.http.post(`${URL_SERVER}/usuarios`, data).pipe(\r\n            map((res: any) => {\r\n                if (res.exe) {\r\n                    res.response.exe = res.exe;\r\n                    res.response.token = res.token;\r\n                    return res.response;\r\n                } else {\r\n                    return res;\r\n                }\r\n            }),\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n\r\n    usuario(usuario): Observable<any> {\r\n        return this.http.post(`${URL_SERVER}/usuarios/unico`, {buscar: usuario}).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        )\r\n    }\r\n\r\n    iniciarPartida(usuario, dispositivoID): Observable<any> {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                'x-dispositivoID': dispositivoID\r\n            })\r\n        };\r\n        return this.http.post(`${URL_SERVER}/login`, usuario, options ).pipe(\r\n            map((res: any) => {\r\n                if (res.exe) {\r\n                    res.response.exe = res.exe;\r\n                    res.response.token = res.token;\r\n                    return res.response;\r\n                } else {\r\n                    return res.exe;\r\n                }\r\n            }),\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    fotoPerfilUsuarioMoto( imagen, token, tipo ) {\r\n        const options: FileUploadOptions  = {\r\n            fileKey: 'archivo',\r\n            httpMethod: 'PUT',\r\n            headers: {\r\n                'x-token': token\r\n            },\r\n            params: {\r\n                tipo\r\n            }\r\n        }\r\n\r\n        // 4912685137238652\r\n\r\n        const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n        return from(fileTransfer.upload(imagen, `${URL_SERVER}/upload`, options))\r\n        .pipe(\r\n            catchError(error => {\r\n                console.log(`No se pudo subir la imagen `);\r\n                throw new Error(`No se pudo subir la imagen `);\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    fotoPortada( imagen, token, old ) {\r\n        const options: FileUploadOptions  = {\r\n            fileKey: 'archivo',\r\n            httpMethod: 'PUT',\r\n            headers: {\r\n                'x-token': token\r\n            },\r\n            params: {\r\n                old\r\n            }\r\n        }\r\n\r\n        // 4912685137238652\r\n\r\n        const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n        return from(fileTransfer.upload(imagen, `${URL_SERVER}/upload/portada/`, options))\r\n        .pipe(\r\n            catchError(error => {\r\n                console.log(`No se pudo subir la imagen `);\r\n                throw new Error(`No se pudo subir la imagen `);\r\n            })\r\n        );\r\n    }\r\n\r\n    viewImagen(token) {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n        return this.http.get(`${URL_SERVER}/ver`, options).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    buscarUsuario(termino: string, token: string) {\r\n        const headerOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/usuarios/${termino}`, headerOption ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    buscarPerfilUsuario(usuario, token) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/usuarios/perfil/${usuario}`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    traerMisNotificaciones(token, desde) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token,\r\n                'x-desde': desde.toString()\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/notificaciones/misnotificaciones/`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    notiCantidad(token) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/notificaciones/numero/`, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    ActualizarNotificaciones(token, id) {\r\n        const HeaderOption = {\r\n            headers: new HttpHeaders({\r\n                'x-token': token\r\n            })\r\n        };\r\n\r\n        return this.http.put(`${URL_SERVER}/notificaciones/misnotificaciones/cambiarestado/`, {id}, HeaderOption).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n    listarPaises() {\r\n        return this.http.get(`${URL_SERVER}/paises` ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    listarCiudades(pais) {\r\n        const headerOption = {\r\n            headers: new HttpHeaders({\r\n                'x-pais': pais\r\n            })\r\n        };\r\n\r\n        return this.http.get(`${URL_SERVER}/ciudad`, headerOption ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    CodigoComprobar(data) {\r\n     \r\n        return this.http.put(`${URL_SERVER}/codigos`, data ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n    EditarCodigo(data) {\r\n     \r\n        return this.http.put(`${URL_SERVER}/codigos/cambiar`, data ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n\r\n\r\n\r\n    negocios() {\r\n     \r\n        return this.http.get(`${URL_SERVER}/tiponegocio` ).pipe(\r\n            retryWhen(error => this.hanflerError(error))\r\n        );\r\n    }\r\n}\r\n"]}